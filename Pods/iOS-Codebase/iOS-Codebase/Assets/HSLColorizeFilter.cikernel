/* HSLColorizeFilter.cikernel */
vec3 hsv2rgb(lowp vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
kernel vec4 HSLColorizeFilter(sampler src, float hue, float saturation, float lightness) {
    vec4 color = unpremultiply(sample(src, samplerCoord(src)));
    float l = (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) / 2.0;
    float lprim;
    if (lightness <= 0.0) lprim = (1.0 + lightness) * l;
    else lprim = (1.0 - lightness) * l + lightness;
    
    vec3 hueRGB = hsv2rgb(vec3(hue, .5, 1.0));
    vec3 maxSatRGB;
    float h;
    h = hue * 360.0 / 60.0;
    if (hueRGB.r >= hueRGB.g && hueRGB.r >= hueRGB.b) //red max
    {
        if (hueRGB.b < hueRGB.g) //blue min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.r = 1.0;
                maxSatRGB.b = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.r = 2.0 * lprim;
                maxSatRGB.b = 0.0;
            }
            //calculate green
            lowp float delta = maxSatRGB.r - maxSatRGB.b;
            maxSatRGB.g = delta * h + maxSatRGB.b;
            //the third color should lie between min and max; additionally it forces it to lie between 0 and 1
            while (maxSatRGB.g > maxSatRGB.r)
                maxSatRGB.g -= 6.0 * delta;
            while (maxSatRGB.g < maxSatRGB.b)
                maxSatRGB.g += 6.0 * delta;
        } else // green min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.r = 1.0;
                maxSatRGB.g = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.r = 2.0 * lprim;
                maxSatRGB.g = 0.0;
            }
            //calculate blue
            lowp float delta = maxSatRGB.r - maxSatRGB.g;
            maxSatRGB.b = maxSatRGB.g - delta * h;
            while (maxSatRGB.b > maxSatRGB.r)
                maxSatRGB.b -= 6.0 * delta;
            while (maxSatRGB.b < maxSatRGB.g)
                maxSatRGB.b += 6.0 * delta;
        }
    } else if (hueRGB.g >= hueRGB.r && hueRGB.g >= hueRGB.b) //green max
    {
        if (hueRGB.r < hueRGB.b) //red min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.g = 1.0;
                maxSatRGB.r = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.g = 2.0 * lprim;
                maxSatRGB.r = 0.0;
            }
            //calculate blue
            lowp float delta = maxSatRGB.g - maxSatRGB.r;
            maxSatRGB.b = delta * (h - 2.0) + maxSatRGB.r;
            while (maxSatRGB.b > maxSatRGB.g)
                maxSatRGB.b -= 6.0 * delta;
            while (maxSatRGB.b < maxSatRGB.r)
                maxSatRGB.b += 6.0 * delta;
        } else // blue min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.g = 1.0;
                maxSatRGB.b = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.g = 2.0 * lprim;
                maxSatRGB.b = 0.0;
            }
            //calculate red
            lowp float delta = maxSatRGB.g - maxSatRGB.b;
            maxSatRGB.r = maxSatRGB.b - delta * (h - 2.0);
            while (maxSatRGB.r > maxSatRGB.g)
                maxSatRGB.r -= 6.0 * delta;
            while (maxSatRGB.b < maxSatRGB.b)
                maxSatRGB.r += 6.0 * delta;
        }
    } else if (hueRGB.b >= hueRGB.r && hueRGB.b >= hueRGB.g) //blue max
    {
        if (hueRGB.r < hueRGB.g) //red min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.b = 1.0;
                maxSatRGB.r = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.b = 2.0 * lprim;
                maxSatRGB.r = 0.0;
            }
            //calculate green
            lowp float delta = maxSatRGB.b - maxSatRGB.r;
            maxSatRGB.g = maxSatRGB.r - delta * (h - 4.0);
            while (maxSatRGB.g > maxSatRGB.b)
                maxSatRGB.g -= 6.0 * delta;
            while (maxSatRGB.g < maxSatRGB.r)
                maxSatRGB.g += 6.0 * delta;
        } else // green min
        {
            if (2.0 * lprim > 1.0) {
                maxSatRGB.b = 1.0;
                maxSatRGB.g = 2.0 * lprim - 1.0;
            } else {
                maxSatRGB.b = 2.0 * lprim;
                maxSatRGB.g = 0.0;
            }
            //calculate red
            lowp float delta = maxSatRGB.b - maxSatRGB.g;
            maxSatRGB.r = delta * (h - 4.0) + maxSatRGB.g;
            while (maxSatRGB.r > maxSatRGB.b)
                maxSatRGB.r -= 6.0 * delta;
            while (maxSatRGB.r < maxSatRGB.g)
                maxSatRGB.r += 6.0 * delta;
        }
    }
    vec3 finalColor = (1.0 - saturation) * vec3(lprim) + saturation * maxSatRGB;
    color.r = finalColor.r;
    color.g = finalColor.g;
    color.b = finalColor.b;
    return premultiply(color);
}